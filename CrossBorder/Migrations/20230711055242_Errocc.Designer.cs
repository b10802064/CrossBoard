// <auto-generated />
using CrossBorder.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CrossBorder.Migrations
{
    [DbContext(typeof(Cross_BorderContext))]
    [Migration("20230711055242_Errocc")]
    partial class Errocc
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CrossBorder.Models.Classified", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true);

                    b.Property<string>("TypeId")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true);

                    b.HasKey("ProductId", "TypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Classified");
                });

            modelBuilder.Entity("CrossBorder.Models.Country", b =>
                {
                    b.Property<string>("CountryId")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength(true);

                    b.Property<string>("Prefix")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true);

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("CrossBorder.Models.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true);

                    b.Property<string>("CusdtomerName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength(true);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength(true);

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            CustomerId = "001",
                            CusdtomerName = "haah",
                            Email = "haah@gmail.com",
                            Password = "12345"
                        },
                        new
                        {
                            CustomerId = "002",
                            CusdtomerName = "haaj",
                            Email = "haaj@gmail.com",
                            Password = "123456"
                        });
                });

            modelBuilder.Entity("CrossBorder.Models.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true);

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true);

                    b.Property<string>("Photo")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true);

                    b.Property<string>("Photo2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductJP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true);

                    b.HasKey("ProductId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("CrossBorder.Models.Sale", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true);

                    b.Property<string>("CountryId")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true);

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<string>("ProductCountrycode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("Sale");
                });

            modelBuilder.Entity("CrossBorder.Models.Shoppinglist", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true);

                    b.Property<string>("ProductId")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Shoppinglist");
                });

            modelBuilder.Entity("CrossBorder.Models.Type", b =>
                {
                    b.Property<string>("TypeId")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength(true);

                    b.HasKey("TypeId");

                    b.ToTable("Type");
                });

            modelBuilder.Entity("cross_border.ViewModels.AddProductViewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AddProductViewModel");
                });

            modelBuilder.Entity("cross_border.ViewModels.RegisterViewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Verificationcode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RegisterViewModel");
                });

            modelBuilder.Entity("CrossBorder.Models.Classified", b =>
                {
                    b.HasOne("CrossBorder.Models.Product", "Product")
                        .WithMany("Classifieds")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Classified_Product")
                        .IsRequired();

                    b.HasOne("CrossBorder.Models.Type", "Type")
                        .WithMany("Classifieds")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_Classified_Type")
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CrossBorder.Models.Sale", b =>
                {
                    b.HasOne("CrossBorder.Models.Country", "Country")
                        .WithMany("Sales")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Sale_Country")
                        .IsRequired();

                    b.HasOne("CrossBorder.Models.Product", "Product")
                        .WithMany("Sales")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Sale_Product")
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CrossBorder.Models.Shoppinglist", b =>
                {
                    b.HasOne("CrossBorder.Models.Customer", "Customer")
                        .WithMany("Shoppinglists")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Shoppinglist_Customer")
                        .IsRequired();

                    b.HasOne("CrossBorder.Models.Product", "Product")
                        .WithMany("Shoppinglists")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Shoppinglist_Product")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CrossBorder.Models.Country", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("CrossBorder.Models.Customer", b =>
                {
                    b.Navigation("Shoppinglists");
                });

            modelBuilder.Entity("CrossBorder.Models.Product", b =>
                {
                    b.Navigation("Classifieds");

                    b.Navigation("Sales");

                    b.Navigation("Shoppinglists");
                });

            modelBuilder.Entity("CrossBorder.Models.Type", b =>
                {
                    b.Navigation("Classifieds");
                });
#pragma warning restore 612, 618
        }
    }
}
